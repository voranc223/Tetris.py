import random
import pygame
colors = [
    (0, 0, 0),
    (120, 37, 179),
    (100, 179, 179),
    (80, 34, 22),
    (80, 134, 22),
    (180, 34, 22),
    (180, 34, 122),
]

class Figure:
    figures = [         #list tipov in rotacij figur
        [[1, 5, 9, 13], [4, 5, 6, 7]],
        [[1, 2, 6, 7], [2, 6, 5, 9]],
        [[2, 1, 4, 5], [1, 5, 6, 10]],
        [[1, 2, 5, 9], [0, 4, 5, 6], [1, 5, 9, 8], [4, 5, 6, 10]],
        [[1, 2, 6, 10], [5, 6, 7, 9], [2, 6, 10, 11], [3, 5, 6, 7]],
        [[1, 4, 5, 6], [1, 6, 5, 9], [4, 5, 6, 9], [1, 5, 4, 9]],
        [[1, 2, 5, 6]],
    ]

    def __init__(self, x, y):  #figuri določi atribute
        self.x = x
        self.y = y
        self.type = random.randint(0, len(self.figures) - 1)
        self.color = random.randint(1, len(colors)-1)
        self.rotation = 0

    def image(self):
        return self.figures[self.type][self.rotation]       #vrne tip figure iz lista figures

    def rotate(self):
        self.rotation = (self.rotation + 1) % len(self.figures[self.type])      #vrne naslednjo rotacijo figure
class Tetris:
    def __init__(self, height, width):
        self.state = "start"
        self.x = 100
        self.y = 60
        self.zoom = 20
        self.height = height
        self.width = width
        self.figure = None
        self.field=[]
        self.state = "start"
        self.score = 0
        self.lines = 0
        self.level = 1
        for i in range(self.height):
            nova_linija = []
            for y in range(self.width):
                nova_linija.append(0)
            self.field.append(nova_linija)
    def nova_figura(self):      #ustvari figuro in ji določi začetne koordinate
        self.figure = Figure(3, 0)
    def intersekcija(self):
        intersection = False
        for i in range(4):
            for j in range(4):
                a = i * 4 + j
                if a in self.figure.image():
                    if i + self.figure.y > self.height - 1 or \
                            j + self.figure.x > self.width - 1 or\
                            j + self.figure.x < 0 or\
                            self.field[i + game.figure.y][j+game.figure.x]>0:
                                intersection = True
        return intersection
    def uniči_polne_vrste(self):
        for i in range(1, self.height):
            a=0
            for j in range(self.width):
                if self.field [i][j] == 0:
                    a=a+1
            if a == 0:
                self.lines += 1
                self.score += 40*self.level
                for b in range(i,1,-1):
                    for j in range(game.width):
                        self.field [b][j] = self.field [b-1][j]

    def zamrzni(self):
        for i in range(4):
            for y in range(4):
                a = i * 4 + y
                if a in self.figure.image():
                    self.field[self.figure.y + i][self.figure.x + y] = self.figure.color
        self.nova_figura()
        self.uniči_polne_vrste()
        if self.intersekcija():
            self.state = "gameover"

    def pojdi_dol(self):
        self.figure.y += 1
        if self.intersekcija():
            self.figure.y -= 1
            self.zamrzni()
    def pojdi_v_stran(self,x):
        self.figure.x += x
        if self.intersekcija():
            self.figure.x -= x
    def rotiraj_se(self):
        last_rotation = self.figure.rotation
        self.figure.rotate()
        if self.intersekcija():
            self.figure.rotation = last_rotation
    def pojdi_do_dna(self):
        while not self.intersekcija():
            self.figure.y += 1
        self.figure.y -= 1
        self.zamrzni()


pygame.init()

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GRAY = (128, 128, 128)
size = (400, 500)
fps = 60
screen = pygame.display.set_mode(size)
pygame.display.set_caption("Tetris")
done = False
clock = pygame.time.Clock()
game = Tetris(20, 10)
števec=0


while not done:  #glavna zanka
    if game.figure == None:               # kliče funkcijo (nova_figura)
        game.nova_figura()
    if game.lines % 10 == 0:
        game.level = 1+game.lines // 10
    števec += 1
    if števec > 100000:
        števec = 0
    if števec % (fps//game.level// 4) == 0 :
        if game.state == "start":
            game.pojdi_dol()
    for event in pygame.event.get():      #izhod iz okna
        if event.type == pygame.QUIT:
            done = True
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_DOWN:
                game.pojdi_dol()
            if event.key == pygame.K_LEFT:
                game.pojdi_v_stran(-1)
            if event.key == pygame.K_RIGHT:
                game.pojdi_v_stran(1)
            if event.key == pygame.K_UP:
                game.rotiraj_se()
            if event.key == pygame.K_SPACE:
                game.pojdi_do_dna()
            if event.key == pygame.K_ESCAPE:
                game.__init__(20,10)
    screen.fill(BLACK)
    pygame.draw.rect(screen, WHITE, [game.x, game.y, game.zoom * game.width, game.zoom * game.height])



    for i in range(game.height):          # nariše polje
        for j in range(game.width):
            pygame.draw.rect(screen, GRAY, [game.x + game.zoom * j, game.y + game.zoom * i, game.zoom, game.zoom], 1)
            if game.field[i][j] > 0:
                pygame.draw.rect(screen, colors[game.field[i][j]],
                                 [game.x + game.zoom * j + 1, game.y + game.zoom * i + 1, game.zoom - 2, game.zoom - 1])

    if game.figure is not None:           # nariše figuro
        for i in range(4):
            for y in range(4):
                a=i*4+y
                if a in game.figure.image():
                    pygame.draw.rect(screen, colors[game.figure.color],[game.x + game.zoom*(y + game.figure.x)+1,
                                                                 game.y + game.zoom * (i+game.figure.y)+1,
                                                                 game.zoom-2, game.zoom-2])
    font = pygame.font.SysFont('Calibri', 25, True, False)
    font1 = pygame.font.SysFont('Calibri', 65, True, False)
    text = font.render("Level: " + str(game.level), True, WHITE)
    text1 = font.render("Score: " + str(game.score), True, WHITE)
    screen.blit(text, [300, 0])
    screen.blit(text1, [0, 0])
    if game.state == "gameover":
        screen.blit(font1.render("Game Over", True, BLACK), [20, 200])
    pygame.display.flip()
    clock.tick(fps)
pygame.quit()
